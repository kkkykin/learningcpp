* Basic
** Initialization
https://www.learncpp.com/cpp-tutorial/variable-assignment-and-initialization/

Prefer list or value initialization.

#+begin_src cpp
int a;         // no initializer                            (default initialization)
int b = 5;     // initial value after equals sign           (copy initialization)
int c( 6 );    // initial value in parenthesis              (direct initialization)

// List initialization methods                              (C++11) (preferred)
int d { 7 };   // initial value in braces                   (direct list initialization)
int e = { 8 }; // initial value in braces after equals sign (copy list initialization)
int f {};      // initializer is empty braces               (value initialization)
#+end_src

*** multiple init
#+begin_src cpp
int a = 5, b = 6;          // copy initialization
int c( 7 ), d( 8 );        // direct initialization
int e { 9 }, f { 10 };     // direct brace initialization
int g = { 9 }, h = { 10 }; // copy brace initialization
int i {}, j {};            // value initialization
#+end_src

use [[maybe_unused]​] attribute to avoid error, via abbrev.

** iostream
Prefer \n over std::endl when outputting text to the console.


* Function and File
** Return value
If you want to maximize portability, you should only use 0 or EXIT_SUCCESS to indicate a successful termination, or EXIT_FAILURE to indicate an unsuccessful termination.
#+begin_src cpp
#include <cstdlib> // for EXIT_SUCCESS and EXIT_FAILURE

int main()
{
    return EXIT_SUCCESS;
}
#+end_src

** Comment unused function parameter
When a function parameter exists but is not used in the body of the function, do not give it a name. You can optionally put a name inside a comment.
#+begin_src cpp
void doSomething(int /*count*/)
{
}
#+end_src

** Define variable
Define your local variables as close to their first use as reasonable.

** Preprocessor
The entire process of preprocessing, compiling, and linking is called translation.

Preprocessor doesn’t understand C++ concepts.

Directives are only valid from the point of definition to the end of the file in which they are defined. Directives defined in one file do not have any impact on other files (unless they are #included into another file).


* Next
https://www.learncpp.com/cpp-tutorial/header-files/
